/**
 * @file db.h
 * @brief 
 *
 * @author  Roman Horshkov <roman.horshkov@gmail.com>
 * @date    2025
 * (c) 2025
 */

#ifndef DB_H
#define DB_H

#include <errno.h>
#include <lmdb.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>

#include "codec.h"
#include "key.h"

#ifdef __cplusplus
extern "C"
{
#endif

typedef int (*db_encode_fn)(const void* obj, MDB_val* out);
typedef int (*db_decode_fn)(const MDB_val* in, void* obj);
typedef int (*db_print_fn)(const MDB_val* in, FILE* out);
typedef int (*db_cmp_fn)(const MDB_val* a, const MDB_val* b);

/**
 * DBI_ID enum expands from schemas.def
 * enum {
 *      DBI_USER_ID2DATA,
 *      DBI_USER_EMAIL2ID,
 *      DBI_COUNT
 * }
 * Defined before 
 */
#define DBI_EXPAND_ENUM(id, name, ...) DBI_##id,
typedef enum
{
#define _(id, name, ...) DBI_EXPAND_ENUM(id, name)
#include "schemas.def"
#undef _
    DBI_COUNT
} DBI_ID;
#undef DBI_EXPAND_ENUM

/* DBI registry entry */
typedef struct
{
    const char*  name;
    db_encode_fn key_enc;
    db_decode_fn key_dec;
    db_print_fn  key_prn;
    db_encode_fn val_enc;
    db_decode_fn val_dec;
    db_print_fn  val_prn;
    db_cmp_fn    cmp;
    unsigned     open_flags;
    unsigned     put_flags;
    MDB_dbi      dbi;
} dbi_desc_t;

/* Public DB handle (single definition) */
typedef struct
{
    char       root[1024];
    MDB_env*   env;
    dbi_desc_t dbis[DBI_COUNT];
    /* Stats and health */
    size_t map_size_bytes;
    size_t map_size_bytes_max;
} DB;

/* DATABASE */
extern DB* db; /* defined in db.c */

/* Convenience flags */
#define NO_OVERWRITE MDB_NOOVERWRITE
#define APPEND       MDB_APPEND
#define RESERVE      MDB_RESERVE

/* === Per-DB typed wrappers generated by macro === */
#define DECL_PUT_GET_DEL(NAME, DBI, KTYPE, VTYPE, KENC)          \
    static inline int NAME##_put(const KTYPE* k, const VTYPE* v, \
                                 unsigned flags)                 \
    {                                                            \
        return kv_put(DBI, k, v, flags);                         \
    }                                                            \
    static inline int NAME##_get(const KTYPE* k, VTYPE* out)     \
    {                                                            \
        return kv_get(DBI, k, out);                              \
    }                                                            \
    static inline int NAME##_del(const KTYPE* k)                 \
    {                                                            \
        return kv_del(DBI, k);                                   \
    }

/* USER */
DECL_PUT_GET_DEL(user_id2data, DBI_USER_ID2DATA, id2data_key_t, id2data_val_t,
                 enc_uuid)
/* EMAIL2ID uses email2id_key_t â†’ uuid16 */
DECL_PUT_GET_DEL(user_email2id, DBI_USER_EMAIL2ID, email2id_key_t,
                 email2id_val_t, enc_email)
// /* DATA_META */
// DECL_PUT_GET_DEL(data_meta, DBI_DATA_META, uuid16_t, data_meta_rec_t, enc_uuid)
// /* SHA2DATA */
// DECL_PUT_GET_DEL(sha2data, DBI_SHA2DATA, sha256_t, uuid16_t, enc_sha256)
// /* ACLs store presence uint8_t=1 */
// DECL_PUT_GET_DEL(acl_fwd, DBI_ACL_FWD, acl_fwd_key_t, uint8_t, enc_acl_fwd_k)
// DECL_PUT_GET_DEL(acl_rev, DBI_ACL_REV, acl_rev_key_t, uint8_t, enc_acl_rev_k)

/**
 * @brief Open the LMDB environment and initialize sub-databases.
 * @param root_dir Root directory for the database.
 * @param mapsize_bytes LMDB map size in bytes.
 * @return 0 on success, -EIO on error.
 */
int db_open(const char* root_dir, size_t mapsize_bytes);

/**
 * @brief Close the environment and free the global handle.
 */
void db_close(void);

int db_user_register_new(const char* email, uint8_t elen, const char* password,
                         uuid16_t* new_id);

int db_env_mapsize_expand(void);
int db_env_metrics(uint64_t* used, uint64_t* mapsize, uint32_t* psize);
int db_map_mdb_err(int mdb_rc);

/* ===== Transaction helpers (for multi-step ops) ===== */
typedef struct
{
    MDB_txn* txn;
} Tx;

int  tx_begin(int rdonly, Tx* out);
int  tx_commit(Tx* t);
void tx_abort(Tx* t);

MDB_dbi db_get_dbi(DBI_ID dbi_id);

#ifdef __cplusplus
}
#endif

#endif /* DB_H */
